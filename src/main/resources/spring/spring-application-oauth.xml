<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">


	<!--mobile http check -->
	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />

		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>

	<!--mobile http configuration -->
	<http pattern="/api/seller/**" create-session="never" use-expressions="true"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="true" />
		<intercept-url pattern="/api/wechat/*" access="permitAll" />
        <intercept-url pattern="/api/seller/register" access="permitAll" />
        <intercept-url pattern="/api/sms/sendVerifyNum" access="permitAll" />
        <intercept-url pattern="/api/findPwd/updatePassword" access="permitAll" />
        
		<!-- <intercept-url pattern="/api/seller/**" access="hasRole('ROLE_USER')" /> -->
		
		<custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
		
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	

   
	<!--default ClientCredentialsTokenEndpointFilter>
	 <beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean> -->
	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="com.capgemini.university.filter.WDAppClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
		<beans:property name="authenticationEntryPoint" ref="oauth2AuthenticationEntryPoint" />
	</beans:bean>
	
	<!--mobile resource server filter -->
	<oauth2:resource-server id="mobileResourceServer"
		resource-id="mobile-resource" token-services-ref="tokenServices" />


	<!--Config token services -->
	<!-- <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/> -->
	<beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
		<beans:constructor-arg index="0" ref="dataSource-mysql" />
	</beans:bean>

	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="false" />
		<beans:property name="accessTokenValiditySeconds"
			value="1800" />
	</beans:bean>

	<beans:bean id="oauthUserApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
	</beans:bean>

	<oauth2:authorization-server
		client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler"
		user-approval-page="oauth_approval" error-page="oauth_error">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token disabled="true" />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>


<!-- 
	<beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />
 -->
 
 <beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" >
		<beans:property name="exceptionRenderer" ref="wdappExceptionRender" />
</beans:bean>
<beans:bean id="wdappExceptionRender" class="com.capgemini.university.filter.WDAppOAuth2ExceptionRenderer"/>

	<beans:bean id="oauth2AccessDecisionManager"
		class="org.springframework.security.access.vote.UnanimousBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
				<beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>


	<beans:bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
			<beans:property name="exceptionRenderer" ref="wdappExceptionRender" />
	</beans:bean>


	<!--Config ClientDetailsService -->
	<oauth2:client-details-service id="clientDetailsService">

		<!-- mobile client -->
		<oauth2:client client-id="mobile-client" resource-ids="mobile-resource"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="mobile" authorities="ROLE_USER" scope="read,write" />

	</oauth2:client-details-service>


	<beans:bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetailsService" />
	</beans:bean>

	<authentication-manager id="oauth2AuthenticationManager">
		<authentication-provider user-service-ref="oauth2ClientDetailsUserService" />
	</authentication-manager>


</beans:beans>
