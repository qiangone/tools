<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.capgemini.university.dao.CourseDao">
	<insert id="addParticipant" parameterType="com.capgemini.university.model.Participant">

		insert into course_participant
		(
		course_id,
		sbu_id,
		participant_login_name,
		participant_email,
		participant_dispaly_name,
		source
		)
		values(
		#{courseId},
		#{sbuId},
		#{cnName},
		#{email},
		#{displayName},
		#{source}

		)
		<selectKey resultType="int" order="AFTER" keyProperty="id">
			select LAST_INSERT_ID() AS id
		</selectKey>

	</insert>


	<update id="updateParticipant" parameterType="com.capgemini.university.model.Participant">
		update course_participant

		<set>
			<if test="attend != null">
				attend=#{attend}
			</if>

		</set>

		where id=#{id}


	</update>
	
	<update id="updateFreeSeatPool" parameterType="com.capgemini.university.model.FreeSeatPool">
		update free_seat_pool

		<set>
			<if test="seats != null">
				seats=#{seats}
			</if>

		</set>

		where course_id=#{courseId}


	</update>
	
	
	<select id="getFreeSeatPoolList" parameterType="map" resultMap="freeSeatPoolMap">

		SELECT 
		b.event_name event_name,
		b.name course_name,
		a.*
		FROM free_seat_pool a left join course b on a.course_id=b.id
		where 1=1 
		<if test="courseId != null">
			and a.course_id = #{courseId}
		</if>
		
		<if test="freeSeat != null">
			and  TIMESTAMPDIFF(DAY, sysdate(),a.start_time)<![CDATA[  <= ]]>14
            and  a.start_time<![CDATA[  > ]]>sysdate()
		</if>
		

	</select>
	
	


	<insert id="addCourse" parameterType="com.capgemini.university.model.Course">

		INSERT INTO course
		(
		event_name,
		name,
		url,
		start_time,
		end_time,
		duration)
		values(
		#{eventName},
		#{name},
		#{url},
		#{startTime},
		#{endTime},
		#{duration}

		)
		<selectKey resultType="int" order="AFTER" keyProperty="id">
			select LAST_INSERT_ID() AS id
		</selectKey>

	</insert>


	<insert id="addSbuCourse" parameterType="com.capgemini.university.model.SbuCourse">

		insert into sbu_course
		(
		sbu_id,
		course_id,
		duration,
		seats,
		pmds,
		get_free_seats
		)
		values(
		#{sbuId},
		#{courseId},
		#{duration},
		#{seats},
		#{pmds},
		#{getFreeSeats}

		)
		<selectKey resultType="int" order="AFTER" keyProperty="id">
			select LAST_INSERT_ID() AS id
		</selectKey>

	</insert>

	<insert id="addSbuCourseList" parameterType="List">
		insert into sbu_course
		(
		sbu_id,
		course_id,
		duration,
		seats,
		pmds
		)
		VALUES
		<foreach collection="list" item="item" index="index"
			separator=",">

			(
			#{item.sbuId},
			#{item.courseId},
			#{item.duration},
			#{item.seats},
			#{item.pmds}
			)
		</foreach>

	</insert>



	<update id="updateCourse" parameterType="com.capgemini.university.model.Course">
		update course

		<set>
			<if test="eventName != null">
				event_name=#{eventName},
			</if>
			<if test="name != null">
				name=#{name},
			</if>

			<if test="url != null">
				url=#{url},
			</if>

			<if test="startTime != null">
				start_time=#{startTime},
			</if>
			<if test="endTime != null">
				end_time=#{endTime},
			</if>
			<if test="duration != null">
				duration=#{duration},
			</if>

		</set>

		where 1=1

		<if test="id != null">
			and id = #{id}
		</if>


	</update>

	<update id="updateSbuCourse" parameterType="com.capgemini.university.model.SbuCourse">
		update sbu_course

		<set>
			<if test="assignSeats != null">
				assign_seats=#{assignSeats},
			</if>
			<if test="assignPmds != null">
				assign_pmds=#{assignPmds},
			</if>
			<if test="duration != null">
				duration=#{duration},
			</if>
			<if test="seats != null">
				seats=#{seats},
			</if>
			<if test="swapSeats != null">
				swap_seats=#{swapSeats},
			</if>
			<if test="getFreeSeats != null">
				get_free_seats=#{getFreeSeats},
			</if>
			
			


			<if test="pmds != null">
				pmds=#{pmds},
			</if>

		</set>

		where 1=1

		<if test="id != null">
			and id = #{id}
		</if>


	</update>

	<delete id="removeParticipant" parameterType="Map">
		delete from course_participant where 1=1
		<if test="courseId != null">
			and course_id = #{courseId}
		</if>
		<if test="sbuId != null">
			and sbu_id = #{sbuId}
		</if>
		<if test="email != null">
			and participant_email = #{email}
		</if>

	</delete>


	<select id="getAllCourseToBegin" parameterType="map" resultMap="courseMailMap">


		select
		d.name lbps_name,
		d.email,
		e.sbu_name sbu_name,
		a.event_name,
		a.name,
		a.start_time,
		a.end_time,
		a.duration,
		b.seats,
		b.pmds,
		b.assign_seats,
		(b.seats-b.assign_seats) remainning_seats,
		b.assign_pmds,
		(b.pmds-b.assign_pmds) remainning_pmds
		from course a
		left join sbu_course
		b on a.id = b.course_id
		left join sbu_lbps
		c on
		b.sbu_id = c.sbu_id
		left
		join lbps d on c.lbps_id=d.id
		left join sbu
		e
		on b.sbu_id=e.id

		where
		TIMESTAMPDIFF(WEEK,a.start_time,NOW())=#{week}
		and d.name is not null
		and
		d.email is not null
		and (b.assign_seats+b.swap_seats) != b.seats
       




	</select>

	<select id="queryParticipantList" parameterType="map" resultMap="participantMap">

		SELECT
		id,
		course_id,
		sbu_id,
		participant_login_name,
		participant_email,
		participant_dispaly_name,
		attend,
		source
		FROM course_participant where 1=1
		<if test="id != null">
			and id = #{id}
		</if>
		<if test="sbuId != null">
			and sbu_id = #{sbuId}
		</if>
		<if test="courseId != null">
			and course_id = #{courseId}
		</if>
		<if test="email != null">
			and participant_email = #{email}
		</if>

	</select>
	<select id="getSbuCourse" parameterType="map" resultMap="sbuCourseMap">

		SELECT
		id,
		sbu_id,
		course_id,
		duration,
		seats,
		pmds,
		assign_seats,
		assign_pmds,
		swap_seats,
		get_free_seats
		FROM sbu_course where 1=1
		<if test="id != null">
			and id = #{id}
		</if>
		<if test="sbuId != null">
			and sbu_id = #{sbuId}
		</if>
		<if test="courseId != null">
			and course_id = #{courseId}
		</if>

	</select>



	<select id="getCourseListByPage" parameterType="map" resultType="map">

		select
		c.event_name,
		d.logo event_logo,
		b.id sbuId,
		b.sbu_name sbuName,
		c.url url,
		c.id
		courseId,
		c.name courseName,
		c.start_time
		startTime,
		c.end_time endTime,
		c.duration duration,
		a.seats,
		a.pmds,
		a.swap_seats,
		(a.seats-a.assign_seats-a.swap_seats)
		remainedSeats,
		(a.pmds-a.assign_pmds)remainedPmds
		from sbu_course a left
		join sbu b on
		a.sbu_id=b.id
		left join course c on a.course_id=c.id
		left
		join event_logo
		d on c.event_name=d.event_name
		where 1=1
		<if test="id != null">
			and a.sbu_id = #{id}
		</if>
		<if test="courseName != null">
			and c.name like CONCAT('%','${courseName}','%' )
		</if>
		<if test="eventName != null">
			and c.event_name=#{eventName}
		</if>

		<if test="type != null and type == 1"><!-- closed course -->
			and c.end_time <![CDATA[  < ]]>
			sysdate()
		</if>
		<if test="type != null and type == 2"><!-- ongoing course -->
			and TIMESTAMPDIFF(DAY, sysdate(),c.start_time)<![CDATA[  < ]]>14
			and c.end_time>sysdate()
			
		</if>
		<if test="type != null and type == 3"><!-- upcomming course -->
			
			and TIMESTAMPDIFF(DAY, sysdate(),c.start_time)<![CDATA[  >= ]]>14

		</if>

		<if test="swapSeats != null and sbuId != null">
			and TIMESTAMPDIFF(DAY, sysdate(),c.start_time)<![CDATA[  >= ]]>14
			and a.swap_seats>0
			<!-- and b.id != #{sbuId} -->

		</if>

		order by c.start_time
		<if test="showpage != null">
			limit #{startIndex},#{pageSize}
		</if>
	</select>



	<select id="getEventList" parameterType="map" resultType="map">

		SELECT
		distinct b.event_name
		FROM sbu_course a left join course b on
		b.id=a.course_id 
		where 1=1
		<if test="type != null and type == 1"><!-- closed course -->
			and b.end_time <![CDATA[  < ]]>
			sysdate()
		</if>
		<if test="type != null and type == 2"><!-- ongoing course -->
						
			and TIMESTAMPDIFF(DAY, sysdate(),b.start_time)<![CDATA[  < ]]>14
			and b.end_time>sysdate()
			
		</if>
		<if test="type != null and type == 3"><!-- upgoing course -->
			
			and TIMESTAMPDIFF(DAY, sysdate(),b.start_time)<![CDATA[  >= ]]>14

		</if>
		
			<if test="sbuId != null">
			and a.sbu_id=#{sbuId}

		</if>


	</select>




	<select id="getCourse" parameterType="map" resultMap="courseMap">

		SELECT
		id,
		event_name,
		name,
		url,
		start_time,
		end_time,
		duration
		FROM course
		where 1=1
		<if test="id != null">
			and id = #{id}
		</if>
		<if test="eventName != null">
			and event_name = #{eventName}
		</if>


	</select>

	<delete id="deleteCoursebyId">
			delete from course where id =
			#{id}
		</delete>
		
			<delete id="deleteSbuCoursebyId">
			delete from sbu_course where course_id =
			#{id}
		</delete>
		
	

	<select id="getCourseListByEvent" parameterType="map" resultType="map">

		SELECT
		distinct
		b.id,
		b.event_name,
		b.name,
		b.url,
		b.start_time,
		b.end_time,
		b.duration
		<if test="sbuId != null">
		,(a.seats-a.assign_seats) avaliable_seats
		</if>
		FROM sbu_course a left join course b on a.course_id = b.id 
		where 1=1
		
		<if test="eventName != null">
			and b.event_name = #{eventName}
		</if>
		
		
	
		<if test="type != null and type == 1"><!-- closed course -->
			and b.end_time <![CDATA[  < ]]>
			sysdate()
		</if>
		<if test="type != null and type == 2"><!-- ongoing course -->
			
			and TIMESTAMPDIFF(DAY, sysdate(),b.start_time)<![CDATA[  < ]]>14
			and b.end_time>sysdate()
		</if>
		<if test="type != null and type == 3"><!-- upgoing course -->
		
			
			and TIMESTAMPDIFF(DAY, sysdate(),b.start_time)<![CDATA[  >= ]]>14

		</if>
		
		<if test="sbuId != null">
			and a.sbu_id=#{sbuId}
			AND (a.seats-a.assign_seats + a.swap_seats)>0

		</if>
		
		
		


	</select>



	<select id="getAdminCourseListByPage" parameterType="map"
		resultMap="courseWithSbuMap">

		select t.*,
		b.id s_id,
		b.sbu_id sbu_id,
		c.sbu_name sbu_name,
		b.course_id
		s_course_id,
		b.duration s_duration,
		b.seats s_seats,
		b.pmds s_pmds,
		b.assign_seats s_assign_seats,
		b.assign_pmds s_assign_pmds
		from
		(
		select
		a.* from course a
		where 1=1
		<if test="id != null">
			and a.id = #{id}
		</if>
		<if test="eventName != null">
			and a.event_name = #{eventName}
		</if>
		<if test="showpage != null">
			limit #{startIndex},#{pageSize}
		</if>
		)t left join sbu_course b on t.id = b.course_id
		left join sbu c on
		b.sbu_id = c.id

	</select>







	<resultMap id="courseMap" type="com.capgemini.university.model.Course">
		<result property="id" column="id" />
		<result property="eventName" column="event_name" />
		<result property="name" column="name" />
		<result property="url" column="url" />
		<result property="startTime" column="start_time" />
		<result property="endTime" column="end_time" />
		<result property="duration" column="duration" />

	</resultMap>

	<resultMap id="courseWithSbuMap" type="com.capgemini.university.model.Course">
		<result property="id" column="id" />
		<result property="eventName" column="event_name" />
		<result property="name" column="name" />
		<result property="url" column="url" />
		<result property="startTime" column="start_time" />
		<result property="endTime" column="end_time" />
		<result property="duration" column="duration" />
		<collection property="sbuList"
			ofType="com.capgemini.university.model.SbuCourse">
			<result property="id" column="s_id" />
			<result property="sbuId" column="sbu_id" />
			<result property="sbuName" column="sbu_name" />
			<result property="courseId" column="s_course_id" />
			<result property="duration" column="s_duration" />
			<result property="seats" column="s_seats" />
			<result property="pmds" column="s_pmds" />
			<result property="assignSeats" column="s_assign_seats" />
			<result property="assignPmds" column="s_assign_pmds" />

		</collection>

	</resultMap>


	<resultMap id="sbuCourseMap" type="com.capgemini.university.model.SbuCourse">
		<result property="id" column="id" />
		<result property="sbuId" column="sbu_id" />
		<result property="courseId" column="course_id" />
		<result property="duration" column="duration" />
		<result property="seats" column="seats" />
		<result property="pmds" column="pmds" />
		<result property="assignSeats" column="assign_seats" />
		<result property="assignPmds" column="assign_pmds" />
		<result property="swapSeats" column="swap_seats" />
		<result property="getFreeSeats" column="get_free_seats" />
		


	</resultMap>

	<resultMap id="participantMap" type="com.capgemini.university.model.Participant">
		<result property="id" column="id" />
		<result property="sbuId" column="sbu_id" />
		<result property="courseId" column="course_id" />
		<result property="cnName" column="participant_login_name" />
		<result property="email" column="participant_email" />
		<result property="displayName" column="participant_dispaly_name" />
		<result property="attend" column="attend" />
		<result property="source" column="source" />

	</resultMap>


	<resultMap id="courseMailMap" type="com.capgemini.university.model.CourseMail">
		<result property="name" column="lbps_name" />
		<result property="email" column="email" />
		<result property="sbuName" column="sbu_name" />

		<collection property="courseList" ofType="map">
			<result property="name" column="name" />
			<result property="event_name" column="event_name" />
			<result property="start_time" column="start_time" />
			<result property="end_time" column="end_time" />
			<result property="duration" column="duration" />
			<result property="seats" column="seats" />
			<result property="pmds" column="pmds" />
			<result property="assign_seats" column="assign_seats" />
			<result property="assign_pmds" column="assign_pmds" />
			<result property="remainning_seats" column="remainning_seats" />
			<result property="remainning_pmds" column="remainning_pmds" />
		</collection>


	</resultMap>

    <resultMap id="freeSeatPoolMap" type="com.capgemini.university.model.FreeSeatPool">
		<result property="id" column="id" />
		<result property="courseId" column="course_id" />
		<result property="seats" column="seats" />
		<result property="startTime" column="start_time" />
		<result property="endTime" column="end_time" />
		<result property="duration" column="duration" />
		<result property="courseName" column="course_name" />
		<result property="eventName" column="event_name" />

	</resultMap>






</mapper>